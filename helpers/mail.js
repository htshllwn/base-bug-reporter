var nodemailer = require('nodemailer');
var dateHelper = require('./date');

var sendBugsMail = function(newQuestions, mailConfig, filterConfig, recipients){

    return new Promise(function(resolve, reject){
        var transporter = nodemailer.createTransport(mailConfig);

        var emailBody = "Test Mail Generated by Bug Reporter v1.1\n\n";
        emailBody += "Scraping Results for posts uploaded after " + dateHelper.lastDate +" \n\n";
        var stats1;
        var stats2;

        var tempData1 = [];
        var tempData2 = [];
        var tempData3 = [];
        var tempData4 = [];

        if(newQuestions.length == 0){
            emailBody += "No New Questions Raised";
        }

        for(var x = 0; x < newQuestions.length; x++){
        
            if(newQuestions[x].priList){
                for(var y = 0; y < newQuestions[x].priList.length; y++){
                    var tempObj = {};
                    var tempInd = tempData1.indexOf(newQuestions[x].priList[y].keyword);
                    if(tempInd > -1){
                        tempData2[tempInd] += 1;
                    } else {
                        tempData1.push(newQuestions[x].priList[y].keyword);
                        tempData2.push(1);
                        // console.log(tempData1);
                        // console.log(tempData2);
                    }
                }
                stats1 = [tempData1, tempData2];
                // stats1 = tempData;
            }
            if(newQuestions[x].secList){
                for(var y = 0; y < newQuestions[x].secList.length; y++){
                    var tempObj = {};
                    var tempInd = tempData3.indexOf(newQuestions[x].secList[y].keyword);
                    if(tempInd > -1){
                        tempData4[tempInd] += 1;
                    } else {
                        tempData3.push(newQuestions[x].secList[y].keyword);
                        tempData4.push(1);
                    }
                }
                stats2 = [tempData3, tempData4];
            }
        }

            
        if(stats1){
            var temp = stats1;
            // console.log(stats2)
            // console.log(temp);
            emailBody += "Primary Keyword Results - ";
            emailBody += "\n";
            for(var x = 0; x < temp[0].length; x++){
                emailBody += "\t" + temp[0][x] + ": " + temp[1][x];
                emailBody += "\n";
            }
        }

        if(stats2){
            var temp = stats2;
            // console.log(stats2)
            // console.log(temp);
            emailBody += "Secondary Keyword Results - ";
            emailBody += "\n";
            for(var x = 0; x < temp[0].length; x++){
                emailBody += "\t" + temp[0][x] + ": " + temp[1][x];
                emailBody += "\n";
            }
        }
        emailBody += "\n";

        for(var x = 0; x < newQuestions.length; x++){
            emailBody += "* " + newQuestions[x].quesTitle;
            if(filterConfig.nameOfCustomer){
                emailBody += ":- " + newQuestions[x].name;
            }
            emailBody += "\n";
            if(filterConfig.dateOfPost){
                emailBody += "Date of Post: " + newQuestions[x].date;
                emailBody += "\n";
            }
            if(filterConfig.questionBody){
                emailBody += "Details: " + newQuestions[x].questionDetails;
                emailBody += "\n";
            }
            if(filterConfig.baseCampLink){
                emailBody += "Base Camp Link: " + newQuestions[x].link;
                emailBody += "\n";
            }
            if(filterConfig.jiraLink){
                emailBody += "Jira Link: " + newQuestions[x].jiraLink;
                emailBody += "\n";
            }
            emailBody += "\n"; 
        }

        var mailOptions = {
            from: mailConfig.auth.user,
            to: recipients,
            subject: 'Bug Report : ' + newQuestions.length + " question(s) raised",
            text: emailBody
        };
        
        console.log('Sending Mail');
        // console.log(emailBody);
        transporter.sendMail(mailOptions, function(error, info){
            if (error) {
                console.log(error);
                resolve(error);
            } else {
                console.log('Email sent: ' + info.response);
                dateHelper.writeLastDate();
                resolve(info);
            }
        });

    }); 

}

module.exports = {
    sendBugsMail: sendBugsMail
}